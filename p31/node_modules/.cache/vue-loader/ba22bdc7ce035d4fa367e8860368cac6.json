{"remainingRequest":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\e28\\p31\\src\\views\\Shows\\ShowCreate.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\e28\\p31\\src\\views\\Shows\\ShowCreate.vue","mtime":1574338266261},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport ShowService from \"../../services/shows.service\";\r\nimport moment from \"moment\";\r\nimport {\r\n  AuthConfig,\r\n  CommonMessageConfig\r\n} from \"../../assets/configuration/config\";\r\nimport router from \"../../router\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\nexport default {\r\n  name: \"ShowCreate\",\r\n  created() {\r\n    this.showService = new ShowService();\r\n  },\r\n  mounted() {\r\n    let email = localStorage.getItem(\"Email\");\r\n    let password = localStorage.getItem(\"Password\");\r\n    if (email != AuthConfig.sEmail && password != AuthConfig.sPassword) {\r\n      router.push({ name: \"login\" });\r\n    } else {\r\n      let _this = this;\r\n      this.getGenre();\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      genres: [],\r\n      artists: [],\r\n      selectedGenre: null,\r\n      selectedArtist: null,\r\n      showModel: {\r\n        sName: undefined,\r\n        sDescription: undefined,\r\n        dDate: null,\r\n        // sVenue: undefined,\r\n        nTicketPrice: undefined,\r\n        // sPhoneNo: undefined,\r\n        nGenreId: undefined\r\n      },\r\n      editor: ClassicEditor,\r\n      editorConfig: {\r\n        // The configuration of the editor.\r\n        toolbar: {\r\n          items: [\"bold\", \"italic\", \"undo\", \"redo\"]\r\n        }\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    getGenre() {\r\n      this.showService.getGenre().then(response => {\r\n        this.genres = this.alphaSortByKey(response.data, \"nGenreId\");\r\n      });\r\n    },\r\n    alphaSortByKey: function(arr, key) {\r\n      arr.sort(function(a, b) {\r\n        if (a[key] < b[key]) return -1;\r\n        if (a[key] > b[key]) return 1;\r\n        return 0;\r\n      });\r\n      return arr;\r\n    },\r\n    onChangeGenre() {\r\n      let genreId = this.selectedGenre.nGenreId;\r\n      this.showService.getArtistByGenre(genreId).then(response => {\r\n        this.artists = this.alphaSortByKey(response.data, \"nArtistId\");\r\n      });\r\n    },\r\n    saveShow() {\r\n      this.$validator.validate().then(valid => {\r\n        if (valid) {\r\n          let objRequest = {\r\n            sName: this.showModel.sName.replace(/\\s+/g, \" \").trim(),\r\n            sDescription: this.showModel.sDescription,\r\n            dDate: this.formatDate(this.showModel.dDate),\r\n            // sVenue: this.showModel.sVenue.replace(/\\s+/g, \" \").trim(),\r\n            nTicketPrice: this.showModel.nTicketPrice,\r\n            // sPhoneNo: this.showModel.sPhoneNo,\r\n            nGenreId: this.selectedGenre.nGenreId,\r\n            nArtistId: this.selectedArtist.nArtistId,\r\n            start: this.formatDate(this.showModel.dDate),\r\n            title: this.showModel.sName.replace(/\\s+/g, \" \").trim()\r\n          };\r\n\r\n          this.showService.saveShow(objRequest).then(response => {\r\n            if (response.status == 201) {\r\n              this.$toast.add({\r\n                severity: \"success\",\r\n                summary: \"Success Message\",\r\n                detail: CommonMessageConfig.SaveSuccessfully,\r\n                life: 1500\r\n              });\r\n              setTimeout(() => {\r\n                router.push({ name: \"Shows\" });\r\n              }, 1000);\r\n\r\n              // window.location.reload();\r\n            } else {\r\n              this.$toast.add({\r\n                severity: \"error\",\r\n                summary: \"Error Message\",\r\n                detail: CommonMessageConfig.ErrorMessage,\r\n                life: 1500\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    formatDate(date) {\r\n      return moment(date).format();\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["ShowCreate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"ShowCreate.vue","sourceRoot":"src/views/Shows","sourcesContent":["<template>\r\n  <div class=\"m-4\">\r\n    <b-row class=\"mb-3 mt-3 p-4 justify-content-md-center bg-white\">\r\n      <b-col>\r\n        <h1>Create Show</h1>\r\n      </b-col>\r\n    </b-row>\r\n    <Toast />\r\n    <b-row class=\"pt-3 bg-white\">\r\n      <div class=\"card w-100\">\r\n        <!-- <div class=\"card-header\">\r\n        <h1 class=\"h3 m-0\">Create Show</h1>\r\n        </div>-->\r\n        <div class=\"card-body\">\r\n          <div>\r\n            <div class=\"form-group\">\r\n              <label for=\"sName\" class=\"font-weight-bold\">\r\n                Show Name\r\n                <span class=\"required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                v-model=\"showModel.sName\"\r\n                v-validate=\"'required'\"\r\n                placeholder=\"Show Name\"\r\n                id=\"sName\"\r\n                name=\"Name\"\r\n                class=\"form-control\"\r\n                :class=\"{ 'is-invalid': errors.has('Name') }\"\r\n                :maxlength=\"100\"\r\n              />\r\n              <div v-if=\"errors.has('Name')\" class=\"text-danger\">{{ errors.first('Name') }}</div>\r\n            </div>\r\n            <!-- <div class=\"form-group\">\r\n            <label for=\"sSVenue\" class=\"font-weight-bold\">\r\n              Venue\r\n              <span class=\"required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Venue\"\r\n              v-model=\"showModel.sVenue\"\r\n              v-validate=\"'required'\"\r\n              id=\"sSVenue\"\r\n              name=\"Venue\"\r\n              class=\"form-control\"\r\n              :class=\"{ 'is-invalid': errors.has('Venue') }\"\r\n              :maxlength=\"100\"\r\n            />\r\n            <div v-if=\"errors.has('Venue')\" class=\"text-danger\">{{ errors.first('Venue') }}</div>\r\n            </div>-->\r\n            <div class=\"form-group\">\r\n              <label for=\"sDescription\" class=\"font-weight-bold\">\r\n                Description\r\n                <span class=\"required\">*</span>\r\n              </label>\r\n              <ckeditor\r\n                :editor=\"editor\"\r\n                class=\"form-control\"\r\n                v-model=\"showModel.sDescription\"\r\n                v-validate=\"'required'\"\r\n                rows=\"5\"\r\n                id=\"sDescription\"\r\n                name=\"Description\"\r\n                :class=\"{ 'is-invalid': errors.has('Description') }\"\r\n                :maxlength=\"5000\"\r\n                :config=\"editorConfig\"\r\n              ></ckeditor>\r\n              <div\r\n                v-if=\"errors.has('Description')\"\r\n                class=\"text-danger\"\r\n              >{{ errors.first('Description') }}</div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <div for=\"dDate\" class=\"mb-2 font-weight-bold\">\r\n                Show Date\r\n                <span class=\"required\">*</span>\r\n              </div>\r\n              <Calendar\r\n                v-model=\"showModel.dDate\"\r\n                id=\"dDate\"\r\n                name=\"Date\"\r\n                v-validate=\"'required'\"\r\n                :class=\"{ 'is-invalid': errors.has('Date') }\"\r\n                :showIcon=\"true\"\r\n                :showTime=\"true\"\r\n                :showSeconds=\"true\"\r\n                autocomplete=\"off\"\r\n              />\r\n              <div v-if=\"errors.has('Date')\" class=\"text-danger\">{{ errors.first('Date') }}</div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"nPrice\" class=\"font-weight-bold\">\r\n                Ticket Price\r\n                <span class=\"required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                v-model=\"showModel.nTicketPrice\"\r\n                v-validate=\"'required'\"\r\n                placeholder=\"Ticket Price\"\r\n                id=\"nPrice\"\r\n                name=\"Price\"\r\n                min=\"1\"\r\n                class=\"form-control\"\r\n                :class=\"{ 'is-invalid': errors.has('Price') }\"\r\n                :maxlength=\"4\"\r\n              />\r\n              <div v-if=\"errors.has('Price')\" class=\"text-danger\">{{ errors.first('Price') }}</div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <div for=\"sGenreName\" class=\"mb-2 font-weight-bold\">\r\n                Genre\r\n                <span class=\"required\">*</span>\r\n              </div>\r\n              <Dropdown\r\n                v-model=\"selectedGenre\"\r\n                :options=\"genres\"\r\n                v-validate=\"'required'\"\r\n                name=\"Genre\"\r\n                optionLabel=\"sGenreName\"\r\n                placeholder=\"Select a Genre\"\r\n                @change=\"onChangeGenre\"\r\n                :class=\"{ 'is-invalid': errors.has('Genre') }\"\r\n                style=\"width: 210px !important;\"\r\n              />\r\n              <div v-if=\"errors.has('Genre')\" class=\"text-danger\">{{ errors.first('Genre') }}</div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <div for=\"sArtistName\" class=\"mb-2 font-weight-bold\">\r\n                Artist\r\n                <span class=\"required\">*</span>\r\n              </div>\r\n              <Dropdown\r\n                v-model=\"selectedArtist\"\r\n                :options=\"artists\"\r\n                v-validate=\"'required'\"\r\n                name=\"Artist\"\r\n                optionLabel=\"sArtistName\"\r\n                placeholder=\"Select a Artist\"\r\n                :class=\"{ 'is-invalid': errors.has('Artist') }\"\r\n                style=\"width: 210px !important;\"\r\n              />\r\n              <div v-if=\"errors.has('Artist')\" class=\"text-danger\">{{ errors.first('Artist') }}</div>\r\n            </div>\r\n            <!-- <div class=\"form-group\">\r\n            <label for=\"dPhoneNo\" class=\"font-weight-bold\">\r\n              Contact Number\r\n              <span class=\"required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              v-model=\"showModel.sPhoneNo\"\r\n              v-validate=\"{ required: true, regex:/^[0-9]+$/ }\"\r\n              placeholder=\"Contact Number\"\r\n              id=\"dPhoneNo\"\r\n              name=\"ContactNumber\"\r\n              class=\"form-control\"\r\n              :class=\"{ 'is-invalid': errors.has('ContactNumber') }\"\r\n              :maxlength=\"12\"\r\n            />\r\n            <div\r\n              v-if=\"errors.has('ContactNumber')\"\r\n              class=\"text-danger\"\r\n            >{{ errors.first('ContactNumber') }}</div>\r\n            </div>-->\r\n            <div class=\"row\">\r\n              <div class=\"col-6\">\r\n                <button\r\n                  class=\"btn btn-primary\"\r\n                  v-on:click=\"saveShow()\"\r\n                  type=\"submit\"\r\n                  v-bind:disabled=\"errors.any()\"\r\n                >Save</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ShowService from \"../../services/shows.service\";\r\nimport moment from \"moment\";\r\nimport {\r\n  AuthConfig,\r\n  CommonMessageConfig\r\n} from \"../../assets/configuration/config\";\r\nimport router from \"../../router\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\nexport default {\r\n  name: \"ShowCreate\",\r\n  created() {\r\n    this.showService = new ShowService();\r\n  },\r\n  mounted() {\r\n    let email = localStorage.getItem(\"Email\");\r\n    let password = localStorage.getItem(\"Password\");\r\n    if (email != AuthConfig.sEmail && password != AuthConfig.sPassword) {\r\n      router.push({ name: \"login\" });\r\n    } else {\r\n      let _this = this;\r\n      this.getGenre();\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      genres: [],\r\n      artists: [],\r\n      selectedGenre: null,\r\n      selectedArtist: null,\r\n      showModel: {\r\n        sName: undefined,\r\n        sDescription: undefined,\r\n        dDate: null,\r\n        // sVenue: undefined,\r\n        nTicketPrice: undefined,\r\n        // sPhoneNo: undefined,\r\n        nGenreId: undefined\r\n      },\r\n      editor: ClassicEditor,\r\n      editorConfig: {\r\n        // The configuration of the editor.\r\n        toolbar: {\r\n          items: [\"bold\", \"italic\", \"undo\", \"redo\"]\r\n        }\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    getGenre() {\r\n      this.showService.getGenre().then(response => {\r\n        this.genres = this.alphaSortByKey(response.data, \"nGenreId\");\r\n      });\r\n    },\r\n    alphaSortByKey: function(arr, key) {\r\n      arr.sort(function(a, b) {\r\n        if (a[key] < b[key]) return -1;\r\n        if (a[key] > b[key]) return 1;\r\n        return 0;\r\n      });\r\n      return arr;\r\n    },\r\n    onChangeGenre() {\r\n      let genreId = this.selectedGenre.nGenreId;\r\n      this.showService.getArtistByGenre(genreId).then(response => {\r\n        this.artists = this.alphaSortByKey(response.data, \"nArtistId\");\r\n      });\r\n    },\r\n    saveShow() {\r\n      this.$validator.validate().then(valid => {\r\n        if (valid) {\r\n          let objRequest = {\r\n            sName: this.showModel.sName.replace(/\\s+/g, \" \").trim(),\r\n            sDescription: this.showModel.sDescription,\r\n            dDate: this.formatDate(this.showModel.dDate),\r\n            // sVenue: this.showModel.sVenue.replace(/\\s+/g, \" \").trim(),\r\n            nTicketPrice: this.showModel.nTicketPrice,\r\n            // sPhoneNo: this.showModel.sPhoneNo,\r\n            nGenreId: this.selectedGenre.nGenreId,\r\n            nArtistId: this.selectedArtist.nArtistId,\r\n            start: this.formatDate(this.showModel.dDate),\r\n            title: this.showModel.sName.replace(/\\s+/g, \" \").trim()\r\n          };\r\n\r\n          this.showService.saveShow(objRequest).then(response => {\r\n            if (response.status == 201) {\r\n              this.$toast.add({\r\n                severity: \"success\",\r\n                summary: \"Success Message\",\r\n                detail: CommonMessageConfig.SaveSuccessfully,\r\n                life: 1500\r\n              });\r\n              setTimeout(() => {\r\n                router.push({ name: \"Shows\" });\r\n              }, 1000);\r\n\r\n              // window.location.reload();\r\n            } else {\r\n              this.$toast.add({\r\n                severity: \"error\",\r\n                summary: \"Error Message\",\r\n                detail: CommonMessageConfig.ErrorMessage,\r\n                life: 1500\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    formatDate(date) {\r\n      return moment(date).format();\r\n    }\r\n  }\r\n};\r\n</script>"]}]}