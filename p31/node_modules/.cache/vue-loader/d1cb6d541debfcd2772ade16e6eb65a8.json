{"remainingRequest":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\e28\\p31\\src\\admin\\Login\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\e28\\p31\\src\\admin\\Login\\Login.vue","mtime":1574338263028},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport router from \"../../router\";\r\nimport {\r\n  AuthConfig,\r\n  CommonMessageConfig\r\n} from \"../../assets/configuration/config\";\r\n\r\nexport default {\r\n  name: \"Login\",\r\n  mounted() {\r\n    localStorage.removeItem(\"Email\");\r\n    localStorage.removeItem(\"Password\");\r\n  },\r\n  data() {\r\n    return {\r\n      loginModel: {\r\n        sEmail: undefined,\r\n        sPassword: undefined\r\n      },\r\n      sError: undefined,\r\n      config: AuthConfig\r\n    };\r\n  },\r\n  methods: {\r\n    checkLogin(e) {\r\n      this.$validator.validate().then(valid => {\r\n        if (valid) {\r\n          if (\r\n            this.loginModel.sEmail == this.config.sEmail &&\r\n            this.loginModel.sPassword == this.config.sPassword\r\n          ) {\r\n            localStorage.setItem(\"Email\", this.loginModel.sEmail);\r\n            localStorage.setItem(\"Password\", this.loginModel.sPassword);\r\n            router.push({ name: \"createshow\" });\r\n          } else {\r\n            this.sError = CommonMessageConfig.InvalidCredential;\r\n\r\n            setTimeout(() => {\r\n              this.sError = \"\";\r\n            }, 2000);\r\n          }\r\n\r\n          e.target.reset();\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/admin/Login","sourcesContent":["<template>\r\n  <div class=\"app flex-row align-items-center\">\r\n    <div class=\"container\">\r\n      <div class=\"justify-content-center\">\r\n        <div class=\"col-md-8 mx-auto\">\r\n          <div class=\"card-group\">\r\n            <div class=\"card p-4\">\r\n              <div class=\"card-body\">\r\n                <div class=\"alert alert-danger\" v-if=\"sError\">{{sError}}</div>\r\n                <form @submit.prevent=\"checkLogin\">\r\n                  <h1>Login</h1>\r\n                  <p class=\"text-muted\">Sign In to your account</p>\r\n                  <div class=\"form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      v-model=\"loginModel.sEmail\"\r\n                      v-validate=\"'required|email'\"\r\n                      placeholder=\"Email\"\r\n                      id=\"sEmail\"\r\n                      name=\"Email\"\r\n                      class=\"form-control\"\r\n                      :class=\"{ 'is-invalid': errors.has('Email') }\"\r\n                      :maxlength=\"50\"\r\n                      autocomplete=\"off\"\r\n                    />\r\n                    <div v-if=\"errors.has('Email')\" class=\"text-danger\">{{ errors.first('Email') }}</div>\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <input\r\n                      type=\"password\"\r\n                      v-model=\"loginModel.sPassword\"\r\n                      v-validate=\"'required'\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"Password\"\r\n                      id=\"sPassword\"\r\n                      name=\"Password\"\r\n                      :class=\"{ 'is-invalid': errors.has('Password') }\"\r\n                      :maxlength=\"50\"\r\n                      autocomplete=\"off\"\r\n                    />\r\n                    <div\r\n                      v-if=\"errors.has('Password')\"\r\n                      class=\"text-danger\"\r\n                    >{{ errors.first('Password') }}</div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-6\">\r\n                      <button class=\"btn btn-primary\" v-bind:disabled=\"errors.any()\">Login</button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport router from \"../../router\";\r\nimport {\r\n  AuthConfig,\r\n  CommonMessageConfig\r\n} from \"../../assets/configuration/config\";\r\n\r\nexport default {\r\n  name: \"Login\",\r\n  mounted() {\r\n    localStorage.removeItem(\"Email\");\r\n    localStorage.removeItem(\"Password\");\r\n  },\r\n  data() {\r\n    return {\r\n      loginModel: {\r\n        sEmail: undefined,\r\n        sPassword: undefined\r\n      },\r\n      sError: undefined,\r\n      config: AuthConfig\r\n    };\r\n  },\r\n  methods: {\r\n    checkLogin(e) {\r\n      this.$validator.validate().then(valid => {\r\n        if (valid) {\r\n          if (\r\n            this.loginModel.sEmail == this.config.sEmail &&\r\n            this.loginModel.sPassword == this.config.sPassword\r\n          ) {\r\n            localStorage.setItem(\"Email\", this.loginModel.sEmail);\r\n            localStorage.setItem(\"Password\", this.loginModel.sPassword);\r\n            router.push({ name: \"createshow\" });\r\n          } else {\r\n            this.sError = CommonMessageConfig.InvalidCredential;\r\n\r\n            setTimeout(() => {\r\n              this.sError = \"\";\r\n            }, 2000);\r\n          }\r\n\r\n          e.target.reset();\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>"]}]}