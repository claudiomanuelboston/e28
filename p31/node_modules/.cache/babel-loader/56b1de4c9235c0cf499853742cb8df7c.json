{"remainingRequest":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\thread-loader\\dist\\cjs.js!C:\\xampp\\htdocs\\e28\\p31\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\e28\\p31\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\e28\\p31\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\e28\\p31\\node_modules\\primevue\\components\\datatable\\ScrollableView.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\primevue\\components\\datatable\\ScrollableView.vue","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\e28\\p31\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport DomHandler from \"../utils/DomHandler\";\nimport TableLoadingBody from \"./TableLoadingBody\";\nexport default {\n  props: {\n    frozen: {\n      type: Boolean,\n      default: false\n    },\n    frozenWidth: {\n      type: String,\n      default: null\n    },\n    columns: {\n      type: null,\n      default: null\n    },\n    scrollHeight: {\n      type: String,\n      default: null\n    },\n    virtualScroll: {\n      type: Boolean,\n      default: false\n    },\n    virtualRowHeight: {\n      type: Number,\n      default: null\n    },\n    rows: {\n      type: Number,\n      default: null\n    },\n    totalRecords: {\n      type: Number,\n      default: 0\n    }\n  },\n  virtualScrollCallback: null,\n  mounted: function mounted() {\n    this.setScrollHeight();\n    if (!this.frozen) this.alignScrollBar();else this.$refs.scrollBody.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\n\n    if (this.virtualScroll) {\n      this.$refs.virtualScroller.style.height = this.totalRecords * this.virtualRowHeight + 'px';\n    }\n  },\n  updated: function updated() {\n    if (!this.frozen) {\n      this.alignScrollBar();\n    }\n\n    if (this.virtualScrollCallback) {\n      this.virtualScrollCallback();\n      this.virtualScrollCallback = null;\n    }\n  },\n  watch: {\n    scrollHeight: function scrollHeight() {\n      this.setScrollHeight();\n    },\n    totalRecords: function totalRecords(newValue) {\n      if (this.virtualScroll) {\n        this.$refs.virtualScroller.style.height = newValue * this.virtualRowHeight + 'px';\n      }\n    }\n  },\n  methods: {\n    onHeaderScroll: function onHeaderScroll() {\n      this.$refs.scrollHeader.scrollLeft = 0;\n    },\n    onBodyScroll: function onBodyScroll() {\n      var _this = this;\n\n      var frozenView = this.$el.previousElementSibling;\n      var frozenScrollBody;\n\n      if (frozenView) {\n        frozenScrollBody = DomHandler.findSingle(frozenView, '.p-datatable-scrollable-body');\n      }\n\n      if (frozenScrollBody) {\n        frozenScrollBody.scrollTop = this.$refs.scrollBody.scrollTop;\n      }\n\n      this.$refs.scrollHeaderBox.style.marginLeft = -1 * this.$refs.scrollBody.scrollLeft + 'px';\n\n      if (this.$refs.scrollFooterBox) {\n        this.$refs.scrollFooterBox.style.marginLeft = -1 * this.$refs.scrollBody.scrollLeft + 'px';\n      }\n\n      if (this.virtualScroll) {\n        var viewport = DomHandler.getClientHeight(this.$refs.scrollBody);\n        var tableHeight = DomHandler.getOuterHeight(this.$refs.scrollTable);\n        var pageHeight = this.virtualRowHeight * this.rows;\n        var virtualTableHeight = DomHandler.getOuterHeight(this.$refs.virtualScroller);\n        var pageCount = virtualTableHeight / pageHeight || 1;\n        var scrollBodyTop = this.$refs.scrollTable.style.top || '0';\n\n        if (this.$refs.scrollBody.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight || this.$refs.scrollBody.scrollTop < parseFloat(scrollBodyTop)) {\n          if (this.$refs.loadingTable) {\n            this.$refs.loadingTable.style.display = 'table';\n            this.$refs.loadingTable.style.top = this.$refs.scrollBody.scrollTop + 'px';\n          }\n\n          var page = Math.floor(this.$refs.scrollBody.scrollTop * pageCount / this.$refs.scrollBody.scrollHeight) + 1;\n          this.$emit('virtual-scroll', {\n            page: page\n          });\n\n          this.virtualScrollCallback = function () {\n            if (_this.$refs.loadingTable) {\n              _this.$refs.loadingTable.style.display = 'none';\n            }\n\n            _this.$refs.scrollTable.style.top = (page - 1) * pageHeight + 'px';\n          };\n        }\n      }\n    },\n    setScrollHeight: function setScrollHeight() {\n      if (this.scrollHeight) {\n        if (this.scrollHeight.indexOf('%') !== -1) {\n          var datatableContainer = this.findDataTableContainer(this.$el);\n          this.$refs.scrollBody.style.visibility = 'hidden';\n          this.$refs.scrollBody.style.height = '100px'; //temporary height to calculate static height\n\n          var containerHeight = DomHandler.getOuterHeight(datatableContainer);\n          var relativeHeight = DomHandler.getOuterHeight(datatableContainer.parentElement) * parseInt(this.scrollHeight, 10) / 100;\n          var staticHeight = containerHeight - 100; //total height of headers, footers, paginators\n\n          var scrollBodyHeight = relativeHeight - staticHeight;\n          this.$refs.scrollBody.style.height = 'auto';\n          this.$refs.scrollBody.style.maxHeight = scrollBodyHeight + 'px';\n          this.$refs.scrollBody.style.visibility = 'visible';\n        } else {\n          this.$refs.scrollBody.style.maxHeight = this.scrollHeight;\n        }\n      }\n    },\n    hasVerticalOverflow: function hasVerticalOverflow() {\n      return DomHandler.getOuterHeight(this.$refs.scrollTable) > DomHandler.getOuterHeight(this.$refs.scrollBody);\n    },\n    alignScrollBar: function alignScrollBar() {\n      var scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n      this.$refs.scrollHeaderBox.style.marginRight = scrollBarWidth + 'px';\n\n      if (this.$refs.scrollFooterBox) {\n        this.$refs.scrollFooterBox.style.marginRight = scrollBarWidth + 'px';\n      }\n    },\n    findDataTableContainer: function findDataTableContainer(element) {\n      if (element) {\n        var el = element;\n\n        while (el && !DomHandler.hasClass(el, 'p-datatable')) {\n          el = el.parentElement;\n        }\n\n        return el;\n      } else {\n        return null;\n      }\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return ['p-datatable-scrollable-view', {\n        'p-datatable-frozen-view': this.frozen,\n        'p-datatable-unfrozen-view': !this.frozen && this.frozenWidth\n      }];\n    },\n    containerStyle: function containerStyle() {\n      if (this.frozenWidth) {\n        if (this.frozen) {\n          return {\n            width: this.frozenWidth\n          };\n        } else {\n          return {\n            width: 'calc(100% - ' + this.frozenWidth + ')',\n            left: this.frozenWidth\n          };\n        }\n      } else {\n        return null;\n      }\n    },\n    bodyTableClass: function bodyTableClass() {\n      return ['p-datatable-scrollable-body-table', {\n        'p-datatable-virtual-table': this.virtualScroll\n      }];\n    },\n    bodyTableStyle: function bodyTableStyle() {\n      return this.virtualScroll ? {\n        top: '0'\n      } : null;\n    }\n  },\n  components: {\n    'DTTableLoadingBody': TableLoadingBody\n  }\n};",{"version":3,"sources":["ScrollableView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n      <div :class=\"containerClass\" :style=\"containerStyle\">\n        <div class=\"p-datatable-scrollable-header\" ref=\"scrollHeader\" @scroll=\"onHeaderScroll\">\n            <div class=\"p-datatable-scrollable-header-box\" ref=\"scrollHeaderBox\">\n                <table class=\"p-datatable-scrollable-header-table\">\n                    <colgroup class=\"p-datatable-scrollable-colgroup\">\n                        <col v-for=\"(col,i) of columns\" :key=\"col.columnKey||col.field||i\" :style=\"col.headerStyle\" />\n                    </colgroup>\n                    <slot name=\"header\"></slot>\n                    <slot name=\"frozenbody\"></slot>\n                </table>\n            </div>\n        </div>\n        <div class=\"p-datatable-scrollable-body\" ref=\"scrollBody\" @scroll=\"onBodyScroll\">\n            <table ref=\"scrollTable\" :class=\"bodyTableClass\" :style=\"bodyTableStyle\">\n                <colgroup class=\"p-datatable-scrollable-colgroup\">\n                    <col v-for=\"(col,i) of columns\" :key=\"col.columnKey||col.field||i\" :style=\"col.headerStyle\" />\n                </colgroup>\n                <slot name=\"body\"></slot>\n            </table>\n            <table ref=\"loadingTable\" :style=\"{top:'0', display: 'none'}\" class=\"p-datatable-scrollable-body-table p-datatable-loading-virtual-table p-datatable-virtual-table\">\n                <colgroup class=\"p-datatable-scrollable-colgroup\">\n                    <col v-for=\"(col,i) of columns\" :key=\"col.columnKey||col.field||i\" :style=\"col.headerStyle\" />\n                </colgroup>\n                <DTTableLoadingBody :columns=\"columns\" :rows=\"rows\" />\n            </table>\n            <div class=\"p-datatable-virtual-scroller\" ref=\"virtualScroller\"></div>\n        </div>\n        <div class=\"p-datatable-scrollable-footer\" ref=\"scrollFooter\">\n            <div class=\"p-datatable-scrollable-footer-box\" ref=\"scrollFooterBox\">\n                <table class=\"p-datatable-scrollable-footer-table\">\n                    <colgroup class=\"p-datatable-scrollable-colgroup\">\n                        <col v-for=\"(col,i) of columns\" :key=\"col.columnKey||col.field||i\" :style=\"col.headerStyle\" />\n                    </colgroup>\n                    <slot name=\"footer\"></slot>\n                </table>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport DomHandler from '../utils/DomHandler';\nimport TableLoadingBody from './TableLoadingBody';\n\nexport default {\n    props: {\n        frozen: {\n            type: Boolean,\n            default: false\n        },\n        frozenWidth: {\n            type: String,\n            default: null\n        },\n        columns: {\n            type: null,\n            default: null\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        },\n        virtualScroll: {\n            type: Boolean,\n            default: false\n        },\n        virtualRowHeight: {\n            type: Number,\n            default: null\n        },\n        rows: {\n            type: Number,\n            default: null,\n        },\n        totalRecords: {\n            type: Number,\n            default: 0\n        }\n    },\n    virtualScrollCallback: null,\n    mounted() {\n        this.setScrollHeight();\n\n        if (!this.frozen)\n            this.alignScrollBar();\n        else\n            this.$refs.scrollBody.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\n\n        if (this.virtualScroll) {\n            this.$refs.virtualScroller.style.height = this.totalRecords * this.virtualRowHeight + 'px';\n        }\n    },\n    updated() {\n        if (!this.frozen) {\n            this.alignScrollBar();\n        }\n\n        if (this.virtualScrollCallback) {\n            this.virtualScrollCallback();\n            this.virtualScrollCallback = null;\n        }\n    },\n    watch: {\n        scrollHeight() {\n            this.setScrollHeight();\n        },\n        totalRecords(newValue) {\n            if (this.virtualScroll) {\n                this.$refs.virtualScroller.style.height = newValue * this.virtualRowHeight + 'px';\n            }\n        }\n    },\n    methods: {\n        onHeaderScroll() {\n            this.$refs.scrollHeader.scrollLeft = 0;\n        },\n        onBodyScroll() {\n            let frozenView = this.$el.previousElementSibling;\n            let frozenScrollBody;\n            if (frozenView) {\n                frozenScrollBody = DomHandler.findSingle(frozenView, '.p-datatable-scrollable-body');\n            }\n\n            if (frozenScrollBody) {\n                frozenScrollBody.scrollTop = this.$refs.scrollBody.scrollTop;\n            }\n\n            this.$refs.scrollHeaderBox.style.marginLeft = -1 * this.$refs.scrollBody.scrollLeft + 'px';\n            if (this.$refs.scrollFooterBox) {\n                this.$refs.scrollFooterBox.style.marginLeft = -1 * this.$refs.scrollBody.scrollLeft + 'px';\n            }\n\n            if (this.virtualScroll) {\n                let viewport = DomHandler.getClientHeight(this.$refs.scrollBody);\n                let tableHeight = DomHandler.getOuterHeight(this.$refs.scrollTable);\n                let pageHeight = this.virtualRowHeight * this.rows;\n                let virtualTableHeight = DomHandler.getOuterHeight(this.$refs.virtualScroller);\n                let pageCount = (virtualTableHeight / pageHeight)||1;\n                let scrollBodyTop = this.$refs.scrollTable.style.top||'0';\n\n                if(this.$refs.scrollBody.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight || this.$refs.scrollBody.scrollTop < parseFloat(scrollBodyTop)) {\n                    if (this.$refs.loadingTable) {\n                        this.$refs.loadingTable.style.display = 'table';\n                        this.$refs.loadingTable.style.top = this.$refs.scrollBody.scrollTop + 'px';\n                    }\n\n                    let page = Math.floor((this.$refs.scrollBody.scrollTop * pageCount) / (this.$refs.scrollBody.scrollHeight)) + 1;\n                    this.$emit('virtual-scroll', {\n                        page: page\n                    });\n\n                    this.virtualScrollCallback = () => {\n                        if (this.$refs.loadingTable) {\n                            this.$refs.loadingTable.style.display = 'none';\n                        }\n\n                        this.$refs.scrollTable.style.top = ((page - 1) * pageHeight) + 'px';\n                    }\n                }\n            }\n        },\n        setScrollHeight() {\n            if (this.scrollHeight) {\n                if(this.scrollHeight.indexOf('%') !== -1) {\n                    let datatableContainer = this.findDataTableContainer(this.$el);\n                    this.$refs.scrollBody.style.visibility = 'hidden';\n                    this.$refs.scrollBody.style.height = '100px';         //temporary height to calculate static height\n                    let containerHeight = DomHandler.getOuterHeight(datatableContainer);\n                    let relativeHeight = DomHandler.getOuterHeight(datatableContainer.parentElement) * parseInt(this.scrollHeight, 10) / 100;\n                    let staticHeight = containerHeight - 100;       //total height of headers, footers, paginators\n                    let scrollBodyHeight = (relativeHeight - staticHeight);\n\n                    this.$refs.scrollBody.style.height = 'auto';\n                    this.$refs.scrollBody.style.maxHeight = scrollBodyHeight + 'px';\n                    this.$refs.scrollBody.style.visibility = 'visible';\n                }\n                else {\n                    this.$refs.scrollBody.style.maxHeight = this.scrollHeight;\n                }\n            }\n        },\n        hasVerticalOverflow() {\n            return DomHandler.getOuterHeight(this.$refs.scrollTable) > DomHandler.getOuterHeight(this.$refs.scrollBody);\n        },\n        alignScrollBar() {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n\n            this.$refs.scrollHeaderBox.style.marginRight = scrollBarWidth + 'px';\n            if (this.$refs.scrollFooterBox) {\n                this.$refs.scrollFooterBox.style.marginRight = scrollBarWidth + 'px';\n            }\n        },\n        findDataTableContainer(element) {\n            if (element) {\n                let el = element;\n                while (el && !DomHandler.hasClass(el, 'p-datatable')) {\n                    el = el.parentElement;\n                }\n\n                return el;\n            }\n            else {\n                return null;\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-datatable-scrollable-view', {'p-datatable-frozen-view': this.frozen, 'p-datatable-unfrozen-view': !this.frozen && this.frozenWidth}];\n        },\n        containerStyle() {\n            if (this.frozenWidth) {\n                if (this.frozen) {\n                    return {\n                        width: this.frozenWidth\n                    };\n                }\n                else {\n                    return {\n                        width: 'calc(100% - ' + this.frozenWidth + ')',\n                        left: this.frozenWidth\n                    }\n                }\n            }\n            else {\n                return null;\n            }\n        },\n        bodyTableClass() {\n            return ['p-datatable-scrollable-body-table', {'p-datatable-virtual-table': this.virtualScroll}];\n        },\n        bodyTableStyle() {\n            return this.virtualScroll ? {top: '0'} : null;\n        }\n    },\n    components: {\n        'DTTableLoadingBody': TableLoadingBody\n    }\n}\n</script>"],"sourceRoot":"node_modules/primevue/components/datatable"}]}